// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "YLab Hackathon Team",
            "email": "admin@ylabhackathon.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/admin/purchases": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Récupère tous les achats avec filtres optionnels (admin uniquement)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Purchases"
                ],
                "summary": "Liste de tous les achats (Admin)",
                "parameters": [
                    {
                        "enum": [
                            "en attente",
                            "confirmé",
                            "annulé"
                        ],
                        "type": "string",
                        "description": "Filtrer par statut",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liste des achats",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Purchase"
                            }
                        }
                    },
                    "401": {
                        "description": "Non authentifié",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Accès admin requis",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Erreur serveur",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/purchases/{id}/action": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Confirme ou annule une demande d'achat en attente (admin uniquement)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Purchases"
                ],
                "summary": "Valider ou refuser un achat (Admin)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID de l'achat",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Action à effectuer",
                        "name": "action",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PurchaseActionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Achat mis à jour",
                        "schema": {
                            "$ref": "#/definitions/models.Purchase"
                        }
                    },
                    "400": {
                        "description": "Requête invalide",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Non authentifié",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Accès admin requis",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Achat non trouvé",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/admin/login": {
            "post": {
                "description": "Authentification d'un administrateur avec username et mot de passe",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Connexion administrateur",
                "parameters": [
                    {
                        "description": "Identifiants de connexion admin",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AdminLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token JWT et informations de l'admin",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Requête invalide",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Identifiants invalides",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/team/login": {
            "post": {
                "description": "Authentification d'une équipe avec nom et mot de passe",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Connexion équipe",
                "parameters": [
                    {
                        "description": "Identifiants de connexion",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TeamLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token JWT et informations de l'équipe",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Requête invalide",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Identifiants invalides",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/polls": {
            "get": {
                "description": "Récupère tous les sondages avec filtre optionnel par statut",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Polls"
                ],
                "summary": "Liste des sondages",
                "parameters": [
                    {
                        "enum": [
                            "ouvert",
                            "fermé"
                        ],
                        "type": "string",
                        "description": "Filtrer par statut",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liste des sondages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Poll"
                            }
                        }
                    },
                    "500": {
                        "description": "Erreur serveur",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/resources": {
            "get": {
                "description": "Récupère la liste de toutes les ressources actives, avec filtre optionnel par type",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Liste des ressources",
                "parameters": [
                    {
                        "enum": [
                            "service",
                            "matériel",
                            "avantage"
                        ],
                        "type": "string",
                        "description": "Type de ressource",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liste des ressources",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Resource"
                            }
                        }
                    },
                    "500": {
                        "description": "Erreur serveur",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/resources/{id}": {
            "get": {
                "description": "Récupère les détails complets d'une ressource par son ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Détails d'une ressource",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID de la ressource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Détails de la ressource",
                        "schema": {
                            "$ref": "#/definitions/models.Resource"
                        }
                    },
                    "404": {
                        "description": "Ressource non trouvée",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/team/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Récupère le profil de l'équipe connectée",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Profil de l'équipe",
                "responses": {
                    "200": {
                        "description": "Profil de l'équipe",
                        "schema": {
                            "$ref": "#/definitions/models.TeamResponse"
                        }
                    },
                    "401": {
                        "description": "Non authentifié",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Équipe non trouvée",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/team/purchases": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Créer une demande d'achat pour une ressource (statut: en attente)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Purchases"
                ],
                "summary": "Acheter une ressource",
                "parameters": [
                    {
                        "description": "Détails de l'achat",
                        "name": "purchase",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PurchaseRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Achat créé avec succès",
                        "schema": {
                            "$ref": "#/definitions/models.Purchase"
                        }
                    },
                    "400": {
                        "description": "Requête invalide ou crédit insuffisant",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Non authentifié",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Ressource non trouvée",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/team/votes": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Créer un vote sur un sondage ouvert en misant des crédits",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Votes"
                ],
                "summary": "Voter sur un sondage",
                "parameters": [
                    {
                        "description": "Détails du vote",
                        "name": "vote",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VoteRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Vote créé avec succès",
                        "schema": {
                            "$ref": "#/definitions/models.Vote"
                        }
                    },
                    "400": {
                        "description": "Requête invalide, crédit insuffisant, ou déjà voté",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Non authentifié",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Sondage non trouvé",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AdminLoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.Poll": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "question": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.PollStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "votes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Vote"
                    }
                }
            }
        },
        "models.PollStatus": {
            "type": "string",
            "enum": [
                "ouvert",
                "fermé"
            ],
            "x-enum-varnames": [
                "PollStatusOpen",
                "PollStatusClosed"
            ]
        },
        "models.Purchase": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_returned": {
                    "type": "boolean"
                },
                "purchase_date": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "resource": {
                    "$ref": "#/definitions/models.Resource"
                },
                "resource_id": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.PurchaseStatus"
                },
                "team": {
                    "$ref": "#/definitions/models.Team"
                },
                "team_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.PurchaseActionRequest": {
            "type": "object",
            "required": [
                "action"
            ],
            "properties": {
                "action": {
                    "type": "string",
                    "enum": [
                        "confirm",
                        "cancel"
                    ]
                }
            }
        },
        "models.PurchaseRequest": {
            "type": "object",
            "required": [
                "quantity",
                "resource_id"
            ],
            "properties": {
                "quantity": {
                    "type": "integer",
                    "minimum": 1
                },
                "resource_id": {
                    "type": "integer"
                }
            }
        },
        "models.PurchaseStatus": {
            "type": "string",
            "enum": [
                "en attente",
                "confirmé",
                "annulé"
            ],
            "x-enum-varnames": [
                "StatusPending",
                "StatusConfirmed",
                "StatusCancelled"
            ]
        },
        "models.Resource": {
            "type": "object",
            "properties": {
                "cost": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image_url": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "is_non_returnable": {
                    "type": "boolean"
                },
                "max_per_team": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "purchases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Purchase"
                    }
                },
                "quantity": {
                    "type": "integer"
                },
                "type": {
                    "description": "\"service\", \"matériel\", \"avantage\"",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Team": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "credit": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_activity": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "purchases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Purchase"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "votes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Vote"
                    }
                }
            }
        },
        "models.TeamLoginRequest": {
            "type": "object",
            "required": [
                "name",
                "password"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.TeamResponse": {
            "type": "object",
            "properties": {
                "credit": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_activity": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Vote": {
            "type": "object",
            "properties": {
                "chosen_option": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "credit_staked": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "poll": {
                    "$ref": "#/definitions/models.Poll"
                },
                "poll_id": {
                    "type": "integer"
                },
                "team": {
                    "$ref": "#/definitions/models.Team"
                },
                "team_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "vote_date": {
                    "type": "string"
                }
            }
        },
        "models.VoteRequest": {
            "type": "object",
            "required": [
                "chosen_option",
                "credit_staked",
                "poll_id"
            ],
            "properties": {
                "chosen_option": {
                    "type": "string"
                },
                "credit_staked": {
                    "type": "integer",
                    "minimum": 1
                },
                "poll_id": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Entrez le token JWT avec le préfixe 'Bearer '",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "YLab Hackathon API",
	Description:      "API pour la plateforme de gestion du Hackathon Ynov Toulouse 2025",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

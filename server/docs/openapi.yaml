openapi: 3.0.3
info:
  title: YLab Hackathon API
  description: API pour la plateforme de gestion du Hackathon Ynov Toulouse 2025
  version: 1.0.0
  contact:
    name: YLab Hackathon Team
    email: admin@ylabhackathon.com

servers:
  - url: http://localhost:8080
    description: Serveur de développement

tags:
  - name: Authentication
    description: Endpoints d'authentification
  - name: Resources
    description: Gestion des ressources
  - name: Purchases
    description: Gestion des achats
  - name: Polls
    description: Gestion des sondages
  - name: Votes
    description: Gestion des votes
  - name: Team
    description: Gestion du profil équipe

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    TeamLoginRequest:
      type: object
      required:
        - name
        - password
      properties:
        name:
          type: string
          example: "Team Alpha"
        password:
          type: string
          example: "password123"

    AdminLoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "admin"
        password:
          type: string
          example: "admin123"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
        team:
          $ref: "#/components/schemas/Team"

    Team:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        credit:
          type: integer
        last_activity:
          type: string
          format: date-time

    Resource:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        cost:
          type: integer
        quantity:
          type: integer
        max_per_team:
          type: integer
        type:
          type: string
          enum: [service, matériel, avantage]
        image_url:
          type: string
        is_active:
          type: boolean
        is_non_returnable:
          type: boolean

    PurchaseRequest:
      type: object
      required:
        - resource_id
        - quantity
      properties:
        resource_id:
          type: integer
          example: 1
        quantity:
          type: integer
          minimum: 1
          example: 1

    Purchase:
      type: object
      properties:
        id:
          type: integer
        team_id:
          type: integer
        resource_id:
          type: integer
        quantity:
          type: integer
        purchase_date:
          type: string
          format: date-time
        is_returned:
          type: boolean
        status:
          type: string
          enum: [en attente, confirmé, annulé]
        team:
          $ref: "#/components/schemas/Team"
        resource:
          $ref: "#/components/schemas/Resource"

    PurchaseActionRequest:
      type: object
      required:
        - action
      properties:
        action:
          type: string
          enum: [confirm, cancel]
          example: "confirm"

    Poll:
      type: object
      properties:
        id:
          type: integer
        question:
          type: string
        options:
          type: array
          items:
            type: string
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        status:
          type: string
          enum: [ouvert, fermé]

    VoteRequest:
      type: object
      required:
        - poll_id
        - chosen_option
        - credit_staked
      properties:
        poll_id:
          type: integer
          example: 1
        chosen_option:
          type: string
          example: "Go"
        credit_staked:
          type: integer
          minimum: 1
          example: 50

    Vote:
      type: object
      properties:
        id:
          type: integer
        team_id:
          type: integer
        poll_id:
          type: integer
        chosen_option:
          type: string
        credit_staked:
          type: integer
        vote_date:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string

paths:
  /health:
    get:
      summary: Health check
      tags:
        - Health
      responses:
        "200":
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"

  /api/auth/team/login:
    post:
      summary: Connexion équipe
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamLoginRequest"
      responses:
        "200":
          description: Connexion réussie
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: Identifiants invalides
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/auth/admin/login:
    post:
      summary: Connexion administrateur
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminLoginRequest"
      responses:
        "200":
          description: Connexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  admin:
                    type: object
        "401":
          description: Identifiants invalides

  /api/resources:
    get:
      summary: Liste des ressources
      tags:
        - Resources
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [service, matériel, avantage]
          description: Filtrer par type de ressource
      responses:
        "200":
          description: Liste des ressources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Resource"

  /api/resources/{id}:
    get:
      summary: Détails d'une ressource
      tags:
        - Resources
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Détails de la ressource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        "404":
          description: Ressource non trouvée

  /api/polls:
    get:
      summary: Liste des sondages
      tags:
        - Polls
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [ouvert, fermé]
          description: Filtrer par statut
      responses:
        "200":
          description: Liste des sondages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Poll"

  /api/polls/{id}:
    get:
      summary: Détails d'un sondage
      tags:
        - Polls
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Détails du sondage
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Poll"
        "404":
          description: Sondage non trouvé

  /api/polls/{id}/results:
    get:
      summary: Résultats d'un sondage
      tags:
        - Polls
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Résultats du sondage
          content:
            application/json:
              schema:
                type: object
                properties:
                  poll:
                    $ref: "#/components/schemas/Poll"
                  results:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        count:
                          type: integer
                        total_credits:
                          type: integer

  /api/team/profile:
    get:
      summary: Profil de l'équipe
      tags:
        - Team
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Profil de l'équipe
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "401":
          description: Non authentifié

  /api/team/purchases:
    get:
      summary: Historique des achats de l'équipe
      tags:
        - Team
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Liste des achats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Purchase"
    post:
      summary: Acheter une ressource
      tags:
        - Purchases
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PurchaseRequest"
      responses:
        "201":
          description: Achat créé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Purchase"
        "400":
          description: Requête invalide
        "401":
          description: Non authentifié

  /api/team/purchases/{id}/return:
    post:
      summary: Retourner un achat
      tags:
        - Purchases
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Achat retourné
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  purchase:
                    $ref: "#/components/schemas/Purchase"
        "400":
          description: Impossible de retourner cet achat
        "403":
          description: Non autorisé
        "404":
          description: Achat non trouvé

  /api/team/votes:
    get:
      summary: Historique des votes de l'équipe
      tags:
        - Team
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Liste des votes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Vote"
    post:
      summary: Voter sur un sondage
      tags:
        - Votes
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VoteRequest"
      responses:
        "201":
          description: Vote créé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vote"
        "400":
          description: Requête invalide
        "401":
          description: Non authentifié

  /api/team/votes/poll/{pollId}:
    get:
      summary: Récupérer le vote pour un sondage
      tags:
        - Votes
      security:
        - bearerAuth: []
      parameters:
        - name: pollId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Détails du vote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vote"
        "404":
          description: Vote non trouvé

  /api/admin/purchases:
    get:
      summary: Liste de tous les achats
      tags:
        - Purchases
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [en attente, confirmé, annulé]
          description: Filtrer par statut
      responses:
        "200":
          description: Liste des achats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Purchase"
        "401":
          description: Non authentifié
        "403":
          description: Accès admin requis

  /api/admin/purchases/{id}/action:
    post:
      summary: Valider ou refuser un achat
      tags:
        - Purchases
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PurchaseActionRequest"
      responses:
        "200":
          description: Achat mis à jour
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Purchase"
        "400":
          description: Requête invalide
        "401":
          description: Non authentifié
        "403":
          description: Accès admin requis
        "404":
          description: Achat non trouvé
